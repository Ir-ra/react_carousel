{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentIndex","handleNextBtn","props","step","frameSize","images","infinite","lastItemIndex","length","setState","handlePrevBtn","this","itemWidth","animationDuration","prevDisabled","nextDisabled","className","style","width","map","img","index","transform","transition","src","alt","type","onClick","disabled","Component","App","htmlFor","id","name","value","min","max","onChange","e","target","checked","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c987217.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Carousel.scss';\n\ntype State = {\n  currentIndex: number,\n};\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    currentIndex: 0,\n  };\n\n  handleNextBtn = () => {\n    const {\n      step,\n      frameSize,\n      images,\n      infinite,\n    } = this.props;\n    const { currentIndex } = this.state;\n\n    const lastItemIndex = images.length - frameSize;\n\n    this.setState({\n      currentIndex: currentIndex + step > lastItemIndex\n        ? lastItemIndex\n        : currentIndex + step,\n    });\n\n    if (currentIndex === lastItemIndex && infinite) {\n      this.setState({\n        currentIndex: 0,\n      });\n    }\n  };\n\n  handlePrevBtn = () => {\n    const {\n      step,\n      frameSize,\n      images,\n      infinite,\n    } = this.props;\n    const { currentIndex } = this.state;\n\n    const firstItemIndex = 0;\n\n    this.setState({\n      currentIndex: currentIndex - step > firstItemIndex\n        ? currentIndex - step\n        : firstItemIndex,\n    });\n\n    if (currentIndex === firstItemIndex && infinite) {\n      this.setState({\n        currentIndex: images.length - frameSize,\n      });\n    }\n  };\n\n  render(): React.ReactNode {\n    const { currentIndex } = this.state;\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const prevDisabled = currentIndex === 0 && !infinite;\n    const nextDisabled = currentIndex === images.length - frameSize\n    && !infinite;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{ width: `${itemWidth * frameSize}px` }}\n      >\n\n        <ul className=\"Carousel__list\">\n          {images.map((img, index) => (\n            <li\n              key={img}\n              style={{ transform: `translateX(-${currentIndex * itemWidth}px)`, transition: `${animationDuration}ms` }}\n            >\n              <img\n                src={img}\n                alt={`${index + 1}`}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <button\n          type=\"button\"\n          onClick={this.handlePrevBtn}\n          disabled={prevDisabled}\n        >\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          onClick={this.handleNextBtn}\n          disabled={nextDisabled}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <label className=\"App__label\" htmlFor=\"widthId\">\n          Item Width:\n        </label>\n        <input\n          type=\"number\"\n          id=\"widthId\"\n          name=\"itemWidth\"\n          value={itemWidth}\n          min={130}\n          max={260}\n          step={10}\n          onChange={(e) => {\n            this.setState({ itemWidth: +e.target.value });\n          }}\n        />\n\n        <label className=\"App__label\" htmlFor=\"sizeId\">\n          Frame Size:\n        </label>\n        <input\n          type=\"number\"\n          id=\"sizeId\"\n          name=\"frameSize\"\n          value={frameSize}\n          min={3}\n          max={10}\n          step={1}\n          onChange={(e) => {\n            this.setState({ frameSize: +e.target.value });\n          }}\n        />\n\n        <label className=\"App__label\">\n          Animation Duration:\n          {' '}\n          <input\n            type=\"number\"\n            name=\"animationDuration\"\n            value={animationDuration}\n            min={500}\n            max={2500}\n            step={500}\n            onChange={(e) => {\n              this.setState({ animationDuration: +e.target.value });\n            }}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"stepId\">\n          step:\n        </label>\n        <input\n          type=\"number\"\n          id=\"stepId\"\n          name=\"step\"\n          value={step}\n          min={1}\n          max={10}\n          step={1}\n          onChange={(e) => {\n            this.setState({ step: +e.target.value });\n          }}\n        />\n\n        <label className=\"App__label\">\n          Infinite:\n          <input\n            type=\"checkbox\"\n            name=\"infinite\"\n            onChange={(e) => {\n              this.setState({ infinite: e.target.checked });\n            }}\n          />\n        </label>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={1000}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}